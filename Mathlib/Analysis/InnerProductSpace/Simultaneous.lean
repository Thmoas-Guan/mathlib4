/-
Copyright (c) 2024 Jon Bannon. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jon Bannon, Jack Cheverton and Samyak Dhar Tuladhar
-/

import Mathlib.Analysis.InnerProductSpace.Spectrum


/-! # Simultaneous eigenspaces of commuting tuples of symmetric operators

This file collects various decomposition results for simultaneous eigenspaces of commuting
tuples of symmetric operators on a finite dimensional Hilbert space.

# Main Results

*

## TODO

Develop `Diagonalization` class that selects a basis of (simultaneous) eigenvectors in a
principled way.

## Tags

self-adjoint operator, simultaneous eigenspaces, simultaneous diagonalization

-/

variable {ùïú : Type*} [RCLike ùïú]
variable {E : Type*} [NormedAddCommGroup E] [InnerProductSpace ùïú E] [FiniteDimensional ùïú E]

local notation "‚ü™" x ", " y "‚ü´" => @inner ùïú E _ x y

open Module.End

namespace LinearMap

namespace IsSymmetric

section Pair

variable {Œ± : ùïú} {A B : E ‚Üí‚Çó[ùïú] E} (hA : A.IsSymmetric) (hB : B.IsSymmetric)
    (hAB : A ‚àò‚Çó B = B ‚àò‚Çó A)

theorem eigenspace_invariant (Œ± : ùïú) : ‚àÄ v ‚àà (eigenspace A Œ±), (B v ‚àà eigenspace A Œ±) := by
  intro v hv
  rw [eigenspace, mem_ker, sub_apply, Module.algebraMap_end_apply, ‚Üê comp_apply A B v, hAB,
  comp_apply B A v, ‚Üê map_smul, ‚Üê map_sub, hv, map_zero] at *

theorem invariant_subspace_inf_eigenspace_eq_restrict {F : Submodule ùïú E} (S : E ‚Üí‚Çó[ùïú] E)
    (Œº : ùïú) (hInv : ‚àÄ v ‚àà F, S v ‚àà F) : (eigenspace S Œº) ‚äì F =
    Submodule.map (Submodule.subtype F)
    (eigenspace (S.restrict (hInv)) Œº) := by
  ext v
  constructor
  ¬∑ intro h
    simp only [Submodule.mem_map, Submodule.coeSubtype, Subtype.exists, exists_and_right,
      exists_eq_right, mem_eigenspace_iff]; use h.2
    exact Eq.symm (SetCoe.ext (_root_.id (Eq.symm (mem_eigenspace_iff.mp h.1))))
  ¬∑ intro h
    simp only [Submodule.mem_inf]
    constructor
    ¬∑ simp only [Submodule.mem_map, Submodule.coeSubtype, Subtype.exists, exists_and_right,
      exists_eq_right, mem_eigenspace_iff, SetLike.mk_smul_mk, restrict_apply,
      Subtype.mk.injEq] at h
      obtain ‚ü®_, hy‚ü© := h
      simpa [mem_eigenspace_iff]
    ¬∑ simp only [Submodule.coeSubtype] at h
      obtain ‚ü®_, hy‚ü© := h
      simp only [‚Üê hy.2, Submodule.coeSubtype, SetLike.coe_mem]

theorem invariant_subspace_inf_eigenspace_eq_restrict' : (fun (Œ≥ : ùïú) ‚Ü¶
    Submodule.map (Submodule.subtype (eigenspace A Œ±)) (eigenspace (B.restrict
    (eigenspace_invariant hAB Œ±)) Œ≥)) = (fun (Œ≥ : ùïú) ‚Ü¶ (eigenspace B Œ≥ ‚äì eigenspace A Œ±)) := by
  funext Œ≥
  exact Eq.symm (invariant_subspace_inf_eigenspace_eq_restrict B Œ≥ (eigenspace_invariant hAB Œ±))

theorem iSup_restrict_eq_top: (‚®Ü Œ≥ , (eigenspace (LinearMap.restrict B
    (eigenspace_invariant hAB Œ±)) Œ≥)) = ‚ä§ := by
    rw [‚Üê Submodule.orthogonal_eq_bot_iff]
    exact orthogonalComplement_iSup_eigenspaces_eq_bot (LinearMap.IsSymmetric.restrict_invariant hB
    (eigenspace_invariant hAB Œ±))

theorem iSup_simultaneous_eigenspaces_eq_top :
    (‚®Ü (Œ± : ùïú), (‚®Ü (Œ≥ : ùïú), (eigenspace B Œ≥ ‚äì eigenspace A Œ±))) = ‚ä§ := by
  have : (fun (Œ± : ùïú) ‚Ü¶  eigenspace A Œ±)  = fun (Œ± : ùïú) ‚Ü¶
      (‚®Ü (Œ≥ : ùïú), (eigenspace B Œ≥ ‚äì eigenspace A Œ±)) := by
    funext; rw [‚Üê invariant_subspace_inf_eigenspace_eq_restrict' hAB,
       ‚Üê Submodule.map_iSup, iSup_restrict_eq_top hB hAB, Submodule.map_top,
       Submodule.range_subtype]
  rw [‚Üê Submodule.orthogonal_eq_bot_iff.mp (hA.orthogonalComplement_iSup_eigenspaces_eq_bot), this]

theorem orthogonality_of_simultaneous_eigenspaces_of_pairwise_commuting_symmetric :
    OrthogonalFamily ùïú (fun (i : ùïú √ó ùïú) => (eigenspace B i.1 ‚äì eigenspace A i.2 : Submodule ùïú E))
    (fun i => (eigenspace B i.1 ‚äì eigenspace A i.2).subtype‚Çó·µ¢) := by
  refine orthogonalFamily_iff_pairwise.mpr ?_
  intro i j hij v ‚ü®hv1 , hv2‚ü©
  have H:=  (Iff.not (Iff.symm Prod.ext_iff)).mpr hij
  push_neg at H
  by_cases C: i.1 = j.1
  <;> intro w ‚ü®hw1, hw2‚ü©
  ¬∑ exact orthogonalFamily_iff_pairwise.mp hA.orthogonalFamily_eigenspaces (H C) hv2 w hw2
  ¬∑ exact orthogonalFamily_iff_pairwise.mp hB.orthogonalFamily_eigenspaces C hv1 w hw1

theorem DirectSum.IsInternal_of_simultaneous_eigenspaces_of_commuting_symmetric_pair:
    DirectSum.IsInternal (fun (i : ùïú √ó ùïú) ‚Ü¶ (eigenspace B i.1 ‚äì eigenspace A i.2)):= by
  apply (OrthogonalFamily.isInternal_iff
    (orthogonality_of_simultaneous_eigenspaces_of_pairwise_commuting_symmetric hA hB)).mpr
  rw [Submodule.orthogonal_eq_bot_iff, iSup_prod, iSup_comm]
  exact iSup_simultaneous_eigenspaces_eq_top hA hB hAB

end Pair

section Tuple

universe u

variable {n m : Type u} [Fintype n] [Fintype m] (T : n ‚Üí (E ‚Üí‚Çó[ùïú] E))
    (hT :(‚àÄ (i : n), ((T i).IsSymmetric)))
    (hC : (‚àÄ (i j : n), (T i) ‚àò‚Çó (T j) = (T j) ‚àò‚Çó (T i)))

open Classical

theorem invariance_iInf [Nonempty n] (i : n) :
    ‚àÄ Œ≥ : {x // x ‚â† i} ‚Üí ùïú, ‚àÄ v ‚àà (‚®Ö (j : {x // x ‚â† i}),
    eigenspace ((Subtype.restrict (fun x ‚Ü¶ x ‚â† i) T) j) (Œ≥ j)), (T i) v ‚àà (‚®Ö (j : {x // x ‚â† i}),
    eigenspace ((Subtype.restrict (fun x ‚Ü¶ x ‚â† i) T) j) (Œ≥ j)) := by
  intro Œ≥ v hv
  simp only [Submodule.mem_iInf] at *
  exact fun i_1 ‚Ü¶ eigenspace_invariant (hC (‚Üëi_1) i) (Œ≥ i_1) v (hv i_1)

theorem iSup_iInf_fun_index_split_single {Œ± Œ≤ Œ≥ : Type*} [DecidableEq Œ±] [CompleteLattice Œ≥]
    (i : Œ±) (s : Œ± ‚Üí Œ≤ ‚Üí Œ≥) : (‚®Ü f : Œ± ‚Üí Œ≤, ‚®Ö x, s x (f x)) =
      ‚®Ü f' : {y // y ‚â† i} ‚Üí Œ≤, ‚®Ü y : Œ≤, s i y ‚äì ‚®Ö x' : {y // y ‚â† i}, (s x' (f' x')) := by
  rw [‚Üê (Equiv.funSplitAt i Œ≤).symm.iSup_comp, iSup_prod, iSup_comm]
  congr!  with f' y
  rw [iInf_split_single _ i, iInf_subtype]
  congr! with x hx
  ¬∑ simp
  ¬∑ simp [dif_neg hx]

theorem invariant_subspace_eigenspace_exhaust {F : Submodule ùïú E} (S : E ‚Üí‚Çó[ùïú] E)
    (hS: IsSymmetric S) (hInv : ‚àÄ v ‚àà F, S v ‚àà F) : ‚®Ü Œº, Submodule.map F.subtype
    (eigenspace (S.restrict hInv) Œº)  = F := by
 conv_lhs => rw [‚Üê Submodule.map_iSup]
 conv_rhs => rw [‚Üê Submodule.map_subtype_top F]
 congr!
 have H : IsSymmetric (S.restrict hInv) := fun x y ‚Ü¶ hS (F.subtype x) ‚Üëy
 apply Submodule.orthogonal_eq_bot_iff.mp (H.orthogonalComplement_iSup_eigenspaces_eq_bot)

theorem orthogonalComplement_iSup_iInf_eigenspaces_eq_bot:
    (‚®Ü (Œ≥ : n ‚Üí ùïú), (‚®Ö (j : n), (eigenspace (T j) (Œ≥ j)) : Submodule ùïú E))·óÆ = ‚ä• := by
  revert T
  refine' Fintype.induction_subsingleton_or_nontrivial n _ _
  ¬∑ intro m _ hhm T hT _
    simp only [Submodule.orthogonal_eq_bot_iff]
    by_cases case : Nonempty m
    ¬∑ have i := choice case
      have := uniqueOfSubsingleton i
      conv => lhs; rhs; ext Œ≥; rw [ciInf_subsingleton i]
      rw [‚Üê (Equiv.funUnique m ùïú).symm.iSup_comp]
      apply Submodule.orthogonal_eq_bot_iff.mp ((hT i).orthogonalComplement_iSup_eigenspaces_eq_bot)
    ¬∑ simp only [not_nonempty_iff] at case
      simp only [iInf_of_empty, ciSup_unique]
  ¬∑ intro m hm hmm H T hT hC
    obtain ‚ü®w, i , h‚ü© := exists_pair_ne m
    simp only [ne_eq] at h
    have D := H {x // x ‚â† i} (Fintype.card_subtype_lt (p := fun (x : m) ‚Ü¶ ¬¨x = i) (x := i)
      (by simp only [not_true_eq_false, not_false_eq_true])) (Subtype.restrict (fun x ‚Ü¶ x ‚â† i) T)
        (fun (i_1 : {x // x ‚â† i}) ‚Ü¶ hT ‚Üëi_1) (fun (i_1 j : { x // x ‚â† i }) ‚Ü¶ hC ‚Üëi_1 ‚Üëj)
    simp only [Submodule.orthogonal_eq_bot_iff] at *
    have E : (‚®Ü (Œ≥ : {x // x ‚â† i} ‚Üí ùïú), (‚®Ü Œº : ùïú, (eigenspace (T i) Œº ‚äì (‚®Ö (j : {x // x ‚â† i}),
    eigenspace (Subtype.restrict (fun x ‚Ü¶ x ‚â† i) T j) (Œ≥ j))))) = ‚®Ü (Œ≥ : {x // x ‚â† i} ‚Üí ùïú),
    (‚®Ö (j : {x // x ‚â† i}), eigenspace (Subtype.restrict (fun x ‚Ü¶ x ‚â† i) T j) (Œ≥ j)) := by
      conv => lhs; rhs; ext Œ≥; rhs; ext Œº; rw [invariant_subspace_inf_eigenspace_eq_restrict (T i) Œº
        (invariance_iInf T hC i Œ≥)]
      conv => lhs; rhs; ext Œ≥; rw [invariant_subspace_eigenspace_exhaust (T i) (hT i)
        (invariance_iInf T hC i Œ≥)]
    rw [‚Üê E] at D
    rw [iSup_iInf_fun_index_split_single i (fun _ ‚Ü¶ (fun Œº ‚Ü¶ (eigenspace (T _) Œº )))]
    exact D

theorem orthogonalFamily_iInf_eigenspaces : OrthogonalFamily ùïú (fun (Œ≥ : n ‚Üí ùïú) =>
    (‚®Ö (j : n), (eigenspace (T j) (Œ≥ j)) : Submodule ùïú E))
    (fun (Œ≥ : n ‚Üí ùïú) => (‚®Ö (j : n), (eigenspace (T j) (Œ≥ j))).subtype‚Çó·µ¢) := by
  intro f g hfg Ef Eg
  obtain ‚ü®a , ha‚ü© := Function.ne_iff.mp hfg
  have H := (orthogonalFamily_eigenspaces (hT a) ha)
  simp only [Submodule.coe_subtype‚Çó·µ¢, Submodule.coeSubtype, Subtype.forall] at H
  apply H
  ¬∑ exact (Submodule.mem_iInf <| fun _ ‚Ü¶ eigenspace (T _) (f _)).mp Ef.2 _
  ¬∑ exact (Submodule.mem_iInf <| fun _ ‚Ü¶ eigenspace (T _) (g _)).mp Eg.2 _

/-- The Hilbert space on which a finite commuting family of symmetric linear operators acts
decomposes as an internal direct sum of simultaneous eigenspaces for these operators. -/
theorem direct_sum_isInternal_simultaneous : DirectSum.IsInternal (fun (Œ± : n ‚Üí ùïú) ‚Ü¶
    ‚®Ö (j : n), (eigenspace (T j) (Œ± j))) := by
    rw [OrthogonalFamily.isInternal_iff]
    ¬∑ exact orthogonalComplement_iSup_iInf_eigenspaces_eq_bot T hT hC
    ¬∑ exact orthogonalFamily_iInf_eigenspaces T hT

end Tuple

end IsSymmetric

end LinearMap
