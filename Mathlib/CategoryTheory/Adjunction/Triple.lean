import Mathlib.CategoryTheory.Adjunction.Unique
import Mathlib.CategoryTheory.Monad.Adjunction

open CategoryTheory Adjunction

namespace CategoryTheory.Adjunction

variable {C D : Type*} [Category C] [Category D]
variable {F H : C ‚•§ D} {G : D ‚•§ C}
variable (adj‚ÇÅ : F ‚ä£ G) (adj‚ÇÇ : G ‚ä£ H)

lemma isIso_unit_iff_isIso_counit  :
    IsIso adj‚ÇÅ.unit ‚Üî IsIso adj‚ÇÇ.counit := by
  let adj : F ‚ãô G ‚ä£ H ‚ãô G := adj‚ÇÅ.comp adj‚ÇÇ
  constructor
  ¬∑ intro h
    let adjId‚ÇÇ : ùü≠ C ‚ä£ H ‚ãô G := adj.ofNatIsoLeft (asIso adj‚ÇÅ.unit).symm
    exact adj‚ÇÇ.isIso_counit_of_iso (adjId‚ÇÇ.rightAdjointUniq id)
  ¬∑ intro h
    let adjId‚ÇÅ : F ‚ãô G ‚ä£ ùü≠ C := adj.ofNatIsoRight (asIso adj‚ÇÇ.counit)
    exact adj‚ÇÅ.isIso_unit_of_iso (adjId‚ÇÅ.leftAdjointUniq id)

noncomputable def fullyFaithfulEquiv : F.FullyFaithful ‚âÉ H.FullyFaithful where
  toFun h :=
    haveI := h.full
    haveI := h.faithful
    haveI : IsIso adj‚ÇÇ.counit := by
      rw [‚Üê adj‚ÇÅ.isIso_unit_iff_isIso_counit adj‚ÇÇ]
      infer_instance
    adj‚ÇÇ.fullyFaithfulROfIsIsoCounit
  invFun h :=
    haveI := h.full
    haveI := h.faithful
    haveI : IsIso adj‚ÇÅ.unit := by
      rw [adj‚ÇÅ.isIso_unit_iff_isIso_counit adj‚ÇÇ]
      infer_instance
    adj‚ÇÅ.fullyFaithfulLOfIsIsoUnit
  left_inv h := by apply Subsingleton.elim
  right_inv h := by apply Subsingleton.elim

end CategoryTheory.Adjunction
